What plans do I have? 
The roadmap of DJSEAMT


Webserver stores data during handshake (hello.php)
Data stored:
- uuid [done]
- hostname [done]
- timestamp when uuid was generated
- timestamp of first contact (never changed in the future) [done]
- timestamp of last contact (changed every time a handshake occurs) [done]
- client version of last contact [done]


Client holds more configuration files
- all files stored in the client configuration directory [done]
- client chooses 'best' file [done: highest priority value]
- files have an expiration and/or begin date
- failback to next 'best' config file when server cannot be reached [done: sorted by priority value]
- configs having the same priority value are chosen randomly (load balancing)


Client runs as daemon
- unless requested by command line option (--foreground or something)
- regular handshake (specified in master config file, overwritten by subconfig file, overwritten by server option)
- trying to contact server for handshake in an endless loop


Client writes log file
- verbosity can be set
- destination set in master configuration file
- describe method of log rotation (done by client or logrotate daemon?)


Client receives new configuration files from server
- server offers list of subconfig files
- client requests missing subconfig files
- orphaned subconfig files are deleted after x days (requires that the client tracks the last successful-handshake date of each file)


Exchanged information
- each client holds its own properties file, which is transferred to the server and stored (could be useful for queries)


Job execution
- client asks for a job
- client executes job
- client sends feedback about running/ended job


Job scheduling
- external program (server) provides job plans
- webserver distributes jobs to clients
- status of a job is 'waiting', 
  'checking' when webserver checks if it's suitable for the client, prevents more webservers from checking the same item (locking),
  'distributed' when job was sent to the client,
  'denied' when client cannot run that job,
  'running' when client gives information about running jobs,
  'finished' when client notifies about a finished job


Encrypted data transfer between client and webserver
- using HTTPS
- using self-made certificates


Oh yes, a lot of work to do...
