#!/usr/bin/perl


##############################################################################
#
#    Copyright (C) 2011  Bernd Arnold - https://github.com/wopfel
#
#    This file is part of DJSEAMT.
#    https://github.com/wopfel/djseamt
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 2 as 
#    published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
##############################################################################


use strict;
use warnings;
use Getopt::Long;
use Config::IniFiles;
use UUID::Tiny;
use LWP::UserAgent;
use URI::Escape;
use Sys::Hostname;
use XML::Simple;
use Data::Dumper;

my $CLIENT_VERSION = "0.0.0.1";

my ( $help, $configfilename
   );



################################################################
##
##  Process command line arguments
##
################################################################

my $arg_status = GetOptions(
                             "h"   => \$help,           "help"         => \$help,
                             "c=s" => \$configfilename, "configfile=s" => \$configfilename,
                           );

print_syntax() if $help;
print_syntax( "Missing config file" )  unless defined $configfilename;


################################################################
##
##  Read master config file
##
################################################################

print "Reading master config file '$configfilename'...\n";

my $master_cfg = new Config::IniFiles( -file => $configfilename );

if ( ! defined $master_cfg ) { print "Error loading master config file.\n"; exit 1; }

my $configdir = $master_cfg->val( 'client', 'configdir' );

# There's no sense proceeding when the directory doesn't exist
die "Configuration directory doesn't exist" unless -d $configdir;




################################################################
##
##  Setting up configuration
##
################################################################

print "Setting up configuration...\n";

if ( ! -e "$configdir/id" ) {

    print "Generating new id...\n";

    my $new_uuid = create_UUID_as_string();

    open IDFILE, ">", "$configdir/id"  or  die "Cannot create id file '$configdir/id'";
    print IDFILE "[id]\n";
    print IDFILE "\tuuid = $new_uuid\n";
    print IDFILE "\ttimestamp_generated = ", time, "\n";
    close IDFILE;

}

my $id_cfg = new Config::IniFiles( -file => "$configdir/id" );

if ( ! defined $id_cfg ) { print "Error loading id config file.\n"; exit 1; }

my $client_id = $id_cfg->val( 'id', 'uuid' );

print "Using client uuid '$client_id'.\n";




################################################################
##
##  Searching for sub configuration files
##
################################################################

print "Searching for sub configuration files in '$configdir'...\n";

my @subconfig_names;

opendir DIR, $configdir;

for ( readdir( DIR ) ) {

    # Only accept this pattern: file name begins with 'subconfig-', followed by a 4 digit number
    next unless $_ =~ /^subconfig-\d{4}/;

    push @subconfig_names, $_;

}

closedir DIR;

print "Found ", scalar(@subconfig_names), " subconfig files.\n";

die "Need at least one subconfig file to proceed" unless scalar @subconfig_names >= 1;

my %subconfig_priority;

for my $subname ( @subconfig_names ) {

    my $sub_cfg = new Config::IniFiles( -file => "$configdir/$subname" );

    if ( ! defined $sub_cfg ) { warn "Error loading subconfig file '$subname'"; next; }

    my $priority = $sub_cfg->val( 'subconfig', 'priority' );

    print "Using subconfig file '$subname', priority $priority.\n";

    # Ignore subconfig files with priority = 0
    $subconfig_priority{$subname} = $priority if $priority > 0;

}

# The item with the highest value in priority is at the end of the array
my @sorted_subconfig = sort { $subconfig_priority{$a} <=> $subconfig_priority{$b} } keys %subconfig_priority;

# Stores the subconfig filename which leads to a successful handshake
my $active_subconfig_name;

# Find a suitable subconfig file
for my $use_subconfig_name ( reverse @sorted_subconfig ) {

    print "Trying subconfig file '$use_subconfig_name' now.\n";

    my $hs_response = handshake( $use_subconfig_name );

    if ( ! defined $hs_response ) {
        warn "Warning: unsuccessful handshake.\n";
    } else  {
        print "Successful handshake.\n";
        my $answer = XMLin( $hs_response );
        print Dumper( $answer );
        $active_subconfig_name = $use_subconfig_name;
        last;
    }

}

die "Error: no connection could be established - terminating" unless defined $active_subconfig_name;

print "Using subconfig file '$active_subconfig_name' now.\n";




################################################################
##
##  Program ends
##
################################################################

print "Terminating client...\n";

exit 0;




################################################################
##
##  Sub: Handshake with server using specified subconfig filename
##
##  Parameter: subconfig filename as a string
##  Returns: undef, when no successful connection could be established,
##           the response from the webserver otherwise
##
################################################################

sub handshake {

    my $subconfig_name = shift;

    return 0 unless defined $subconfig_name;

    my $sub_cfg = new Config::IniFiles( -file => "$configdir/$subconfig_name" );

    if ( ! defined $sub_cfg ) { warn "Error loading subconfig file '$subconfig_name'"; return 0; }

    my %postcontent;
    $postcontent{'id'} = $client_id;
    $postcontent{'id_generated'} = $id_cfg->val( 'id', 'timestamp_generated' );
    $postcontent{'client_version'} = $CLIENT_VERSION;
    $postcontent{'hostname'} = hostname;

    my $ua = LWP::UserAgent->new;
    $ua->agent( "djseamt-client/$CLIENT_VERSION" );

    my $request_url = $sub_cfg->val( 'subconfig', 'contact_url' ) . "/hello.php";

    # Setup request, encode POST data
    my $req = HTTP::Request->new( POST => $request_url );
    $req->content_type( 'application/x-www-form-urlencoded' );
    $postcontent{$_} = uri_escape( $postcontent{$_} ) foreach keys %postcontent;
    my @postcontent;
    push @postcontent, "$_=$postcontent{$_}" foreach keys %postcontent;
    $req->content( join  "&", @postcontent );

    print "Trying to contact server '$request_url'...\n";

    # Send HTTP POST request
    my $response = $ua->request( $req );

    if ( $response->is_success ) {
        print "Successful handshake with server.\n";
        print "Response follows:\n";
        # TODO: do something useful according to response
        foreach ( split /\n/, $response->content ) {
            print "  ", $_, "\n";
        }
        print "Response ends.\n";
        return $response->content;
    } else {
        print "Error communicating with server, '$request_url'.\n";
        return undef;
    }

}




################################################################
##
##  Sub: Print syntax help
##
##  Parameter: Error message (optional, but appreciated)
##
################################################################

sub print_syntax {

    my $error = shift || "unknown";

    print "Error: $error.\n"  unless $help;

    print "DJSEAMT client (https://github.com/wopfel/djseamt)\n";
    print "Copyright (C) 2011 Bernd Arnold\n\n";

    print "DJSEAMT comes with ABSOLUTELY NO WARRANTY; for details see LICENSE file.\n";
    print "This is free software, and you are welcome to redistribute it\n";
    print "under certain conditions; see LICENSE file for details.\n\n";

    print "Distributed Job Scheduling Environment And Management Tool\n\n";

    print "Syntax:\n";
    print "          djseamt-client -c <configfile>\n";
    print "Options:\n";
    print "  -c, --configfile=NAME     use NAME as config file\n";
    print "  -h, --help                show this help\n";

    exit 1;

}

